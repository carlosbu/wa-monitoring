/**
* author: Carlos Buzeto
* code: Node.js 8
*
* Retrieve Watson Assistant conversation log, sum up number of interactions each `period`,
* then return a json object ready to be injested to IBM cloud monitoring
*
* params: 
*   workspaces_id, username, page_limit, authorization, period, password
*/



function main(params) {

return (length(params));

}

function listAllLogs (params) {
    var watson = require('watson-developer-cloud');

    var assistant = new watson.AssistantV1({
        username: params.username,
        password: params.password,
        version: '2018-07-10'
    });

    let response_timestamp = new Date();
    response_timestamp.setMinutes(response_timestamp.getMinutes() - params.period);
    response_timestamp = response_timestamp.toISOString();

    var filterParams = {
        page_limit: params.page_limit,
        filter: 'language::br,workspace_id::' + params.workspaces_id + ', response_timestamp>=' + response_timestamp
    };

    var result = new Promise(function(resolve, reject) {
        assistant.listAllLogs(filterParams, function(err, response) {
            if (err) {
                console.log(`There was an error: ${err}.`);
                reject (err);
            } else {
                resolve (response);
            }
        });        
    })
    
    return (result);
}

async function length(params) {
    
    let logs = await listAllLogs (params);

    let count = 0;
    
    while (Object.keys(logs.pagination).length > 0) {
        logs = await loadLogs (logs, params);
        count = count + params.page_limit;
    }
    
    count = count + Object.keys(logs.logs).length;
    
return ({"result": [{"name": "watson-assistant.api.questions.meter.current.cliente-institucional", "value": count}]});
}

async function loadLogs (logs, params) {
    let next_url = new Array();
    next_url = Object.values(logs.pagination);
    
    const request = require('request-promise');
    const options = {
        method: 'GET',
        json: 'true',
        headers: {
            'Authorization': params.authorization
        },
        uri: 'https://gateway.watsonplatform.net/assistant/api' + next_url
    }
    
    const rp = request(options)
    return rp
        .then (res => (res))
        .catch(err => ({ error: `There was an error: ${err}.`}))
}

